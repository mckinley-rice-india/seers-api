openapi: 3.0.0
info:
  version: 1.0.2
  title: seers
  termsOfService: 'https://seers.io/terms/'
  contact:
    email: admin@mckinleyrice.com
    url: 'http://seers.io/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: ./logo.png
  description: |
    This is an Seers API to demonstrate features of seers API specification

    # Introduction
    This specification is intended to to be a good starting point for describing your API in It also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and 
    [seers-API](https://github.com/mckinley-and-rice/seers-api) documentation engine. So beyond the standard SewersAPI syntax we use a few 
    [vendor extensions](https://github.com/mckinley-and-rice/seers-api/blob/master/docs/redoc-vendor-extensions.md).

    # Status header response code:
    500 - Internal Server Error

    401 - Unauthorized. Token invalid

    200 - OK

    404 - Not Found
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/mckinley-and-rice/seers-api'
tags:
  - name: Status
    description: Status echo operations for server
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about Doctor and Patient user
  - name: Educational Videos
    description: Operations about educational Videos for Patients
  - name: Authentication
    description: All Operations about authentication for ALl users
  - name: Registration
    description: All Operations about authentication for ALl users
  - name: Admin User
    description: Operations about Admin user
servers:
  - url: 'https://seersapi.mckinleyrice.com/api/v1'
paths:
  /admin:
    parameters:
      - name: Operations of Admin Users
        in: query
        description: status response
        schema:
          type: string
    post:
      tags:
        - Admin User
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: createAdmin
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
    put:
      tags:
        - Admin User
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: updateAdmin
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
  '/admin/{id}':
    parameters:
      - name: Operations of Admin Users
        in: query
        description: status response
        schema:
          type: string
    delete:
      tags:
        - Admin User
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: deleteAdmin
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
  /auth/authenticate:
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    post:
      tags:
        - Authentication
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: authAll
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
  /echo:
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
      x-code-samples:
        - lang: 'C#'
          source: |
            API.v1.Echo echo = new API.v1.Echo();
            echo.message = "Hello World!");
            EchoResponse response = echo.post();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Success
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \API\Entities\Echo();
            $form->setMessage("Hello World!");
            try {
                $pet = $client->echo()->post($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
  /health:
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    get:
      tags:
        - Status
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getStatus
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Server Not Working
  /register/doctor:
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    post:
      tags:
        - Registration
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: registerDoctor
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
  /register/patient:
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    post:
      tags:
        - Registration
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: registerPatient
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@columbusx.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /video:
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    post:
      tags:
        - Educational Videos
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: postVideo
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: 0
                response: No token provided
    put:
      tags:
        - Educational Videos
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: putVideo
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Server Not Working
  '/video/{id}':
    parameters:
      - name: Get server health status
        in: query
        description: status response
        schema:
          type: string
    delete:
      tags:
        - Educational Videos
      summary: Get server status
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: deleteVideo
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: ONLINE
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
              example:
                Status: ONLINE
components:
  schemas:
    Admin:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/Password'
        email:
          $ref: '#/components/schemas/Email'
        lastLogin:
          type: string
          format: date-time
    Appointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: NUMBER
        title:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        agenda:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        patient:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        doctor:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        date:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        startTime:
          type: string
          format: date-time
          description: GILT_AB of first CW_STUNDENPLAN
        endTime:
          type: string
          format: date-time
          description: GILT_AB of first CW_STUNDENPLAN
        reminderEmail:
          $ref: '#/components/schemas/Email'
        confirmedByDoctor:
          type: boolean
          description: CW_KALENDER.DEAKTIVIERT
          default: false
        confirmedByPatient:
          type: boolean
          description: CW_KALENDER.DEAKTIVIERT
          default: false
        status:
          type: string
          description: 'State of the appointment: booked, cancelled, ...'
    Degree:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Degree ID
        name:
          type: string
          description: Name of Degree
        year:
          type: string
          format: date
          description: year
    Doctor:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: PATIENTID
        person:
          $ref: '#/components/schemas/Person'
        degree:
          type: array
          description: Degrees of Doctor
          items:
            $ref: '#/components/schemas/Degree'
        speciality:
          type: array
          description: Specialities of Doctor
          items:
            $ref: '#/components/schemas/Speciality'
        experience:
          type: integer
          format: int64
          description: VORNAME
        affiliation:
          type: string
          description: 'Doctor Affiliation with Institutes / Hospitals '
      description: doctor
    Email:
      description: User email address
      type: string
      format: test
      example: hemprasad.badgujar@columbusx.com
    Password:
      description: User password
      type: string
      format: password
      example: hemprasad.badgujar@columbusx.com
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: PATIENTID
        person:
          $ref: '#/components/schemas/Person'
      description: Patient
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: PERSNR
        firstname:
          type: string
          description: VORNAME
        lastname:
          type: string
          description: NAME
        gender:
          type: integer
          format: int64
          description: 'SEX, gender/sex'
        phone:
          type: integer
          format: int64
          description: PERSNR
        address:
          type: string
          description: ''
        profileImage:
          type: string
          description: VORNAME
        userType:
          type: string
          default: patient
        lastLogin:
          type: string
          format: date-time
        isLogin:
          type: boolean
          default: false
        isConfirmed:
          type: boolean
          default: true
      description: NATPERSON
    Speciality:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Speciality
        name:
          type: string
          description: VORNAME
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: hemprasad
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: hemprasad
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: badgujar
        email:
          $ref: '#/components/schemas/Email'
    Video:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Degree ID
        title:
          type: string
          description: Name of Video
        link:
          type: string
          format: uri
          description: year
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://columbusx.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://example.com/oauth/authorize'
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://example.com/.well-known/openid-configuration'
